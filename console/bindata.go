// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// tmpl/css/style.css
// tmpl/index.html
// tmpl/js/script.js
package console

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplCssStyleCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\xcd\x6e\xdb\x30\x10\x84\xcf\xe5\x53\x2c\x10\xf4\x12\x94\x8e\xed\x1a\x69\x21\x9d\xd2\x9f\xbc\x46\xc1\x9f\x95\x44\x68\xc5\x15\xd6\x54\xa5\x40\xf0\xbb\x17\x94\xe5\xaa\x40\xeb\x5e\xe7\x9b\x19\x2e\x86\x96\xfd\x1b\xcc\x0a\x00\x80\x42\x44\xdd\x60\xa8\x9b\x54\xc0\x61\xf7\x8c\x5d\x09\x4f\x8f\x50\x85\x09\x2a\x16\x48\x8d\x09\x50\x71\x4c\x8f\x4f\xea\xa2\x94\x6a\x52\x47\x1f\xe0\x8f\xfc\xef\xe8\x7e\xff\xbe\xcc\x96\x9d\xe3\x98\x4c\x88\x28\xba\xa2\x21\xf8\x59\xbd\xeb\x42\xd4\x7f\xfb\x7a\x13\x91\xf4\xad\xea\xc6\x3f\x1e\xf7\xfd\x54\x42\x76\x14\x85\x1e\xd1\xb6\x21\xe9\xb3\x13\x26\xb2\x46\xd6\x47\xc7\xe0\x53\x53\xc0\xe1\xd8\x4f\xb9\xeb\x1f\x46\x9d\xc4\xb8\x76\xb5\x5b\xe3\xda\x5a\x78\x88\x5e\x3b\x26\x96\x02\x1e\xbe\xbe\x7c\x3f\xbd\xbe\x94\x57\xcc\xe2\x51\x34\x61\x95\xef\xeb\x27\x38\x33\x05\x0f\x0f\xce\xb9\xbb\xed\xcd\xd0\xd9\xfb\xed\xa7\xe3\x67\xeb\xcc\x7f\xc3\x45\xc3\x3f\x51\xee\x57\x1c\xbe\x7d\x3a\x7d\x79\x5d\x96\x52\xbd\x60\xf6\xad\x13\x1d\x9e\xf3\x42\x0a\x20\x17\x54\xc4\x63\x61\x86\xc4\x59\xb8\xce\xb2\x2d\x7c\x46\x42\x97\xd0\xff\x10\x1e\x61\x5e\xbe\x51\x8f\xeb\xce\x96\xc9\x97\x17\xb5\x3b\x27\x09\xb1\x86\x19\xd6\x87\x6b\x41\x8c\x25\x5c\xd4\x2e\x0e\x9d\xcd\x17\xde\x88\x37\xd2\xb2\x98\x58\xe3\x82\x2d\x33\xa1\x89\x1b\xb7\x34\xe0\x1a\x24\xda\xe4\xce\xd4\x18\x93\x59\x48\x8b\x6f\x1b\x10\xf4\x59\xfc\x15\x00\x00\xff\xff\x43\xd7\x46\xd6\x8c\x02\x00\x00")

func tmplCssStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_tmplCssStyleCss,
		"tmpl/css/style.css",
	)
}

func tmplCssStyleCss() (*asset, error) {
	bytes, err := tmplCssStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/css/style.css", size: 652, mode: os.FileMode(420), modTime: time.Unix(1583810807, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x6d\x73\xdb\xb8\x11\xfe\x2c\xfd\x8a\x3d\xb6\x9d\x38\x93\x92\xb4\xac\x73\xe2\xb3\x49\x75\x1c\x5b\x77\xa9\x47\x8e\x95\xc8\xb5\x7b\xf7\x0d\x02\x97\x24\x24\x10\xa0\x01\x50\x2f\xe9\xdc\x7f\xef\x80\x2f\x12\xed\xc8\x8e\x7d\x93\xce\x5c\xfd\x41\x04\x89\xdd\xe7\xd9\x57\x60\xc7\xc1\x0f\xe7\x57\x67\xd7\xbf\x8e\x87\xf0\xe1\xfa\x72\x34\xe8\x06\xa9\xc9\xb8\x7d\x20\x89\x06\xdd\x4e\x90\xa1\x21\x90\x1a\x93\xbb\x78\x57\xb0\x45\xe8\x9c\x49\x61\x50\x18\xf7\x7a\x9d\xa3\x03\xb4\x7a\x0b\x1d\x83\x2b\xe3\x5b\xdd\x13\xa0\x29\x51\x1a\x4d\xf8\xaf\xeb\x9f\xdd\x23\x07\x7c\x0b\x63\x98\xe1\x38\xf8\x70\x7d\x3d\x86\xd3\xf1\x3f\xe1\x52\xd2\x39\x9c\x49\xa1\x25\xc7\xc0\xaf\x36\xbb\xdd\x4e\xa0\xa9\x62\xb9\x01\xad\x68\xe8\xf8\x3e\x95\x11\x7a\xb3\xbb\x02\xd5\xda\xa3\x32\xf3\xab\xa5\xdb\xf3\x7a\x07\xde\xbe\x97\x31\xe1\xcd\xb4\x33\x08\xfc\x4a\x6b\xf0\x5c\xfd\x8c\x25\x8a\x18\x74\x7b\xde\x81\xd7\xdb\x01\xd3\xed\x04\x3f\xb8\x2e\x8c\x88\x41\x6d\x80\xca\x2c\x67\x1c\x23\x20\x22\x82\x8c\x09\x16\x33\x8c\xe0\x6c\x32\x01\xd7\xb5\x94\x9c\x89\x39\x28\xe4\xa1\xa3\xcd\x9a\xa3\x4e\x11\x8d\x03\xa9\xc2\x38\x74\x6c\xdc\xf4\xb1\xef\x67\x64\x45\x23\xe1\x4d\xa5\x34\xda\x28\x92\xdb\x17\x6b\xd0\xe6\x83\xdf\xf7\xfa\xde\x5b\x9f\x6a\xbd\xfd\x56\x5a\x46\xb5\x76\x80\x09\x83\x89\x62\x66\x1d\x3a\x3a\x25\xfd\xa3\x1f\xdd\xde\xdd\x51\x76\x7d\x71\x75\x3a\x59\x1d\xcd\x7a\xa7\xc5\x1b\x72\x78\x7b\x7e\x23\xc6\xec\x80\xcf\x7f\x8e\x97\xcb\xe1\x29\x39\x4a\xcf\xcf\xa3\xd9\x6f\x3c\x1f\x61\xb2\x4a\x67\x37\x97\xc3\x5e\x9c\xcc\x6e\xc7\xbf\x64\xf3\x2f\xfa\x9d\x03\x54\x49\xad\xa5\x62\x09\x13\xa1\x43\x84\x14\xeb\x4c\x16\xda\xd9\x78\x7f\x95\x1b\x26\x05\xe1\x60\x52\xcc\xf0\x7f\xed\xab\x5b\xb2\x3c\xe5\x71\x3c\xba\x3d\xf8\xb8\xdf\xe3\x97\x77\x33\x32\x7f\x3f\x5f\xf5\xb9\x7f\xf9\xd3\x90\xa4\xc5\x32\x9f\xc4\xf8\x71\x71\xf3\xb6\x7f\x71\x88\x5f\x44\xbf\xf8\xed\x0b\xc9\xaf\xf7\x8b\x77\xc3\x5f\xf5\xbf\x2f\x67\x9f\x6e\xde\xec\x0f\xc5\xa1\xfa\xb6\xc7\x4f\xe6\xfb\x82\x2c\xc8\xa4\x2a\xae\x2a\x14\xed\x4a\x7b\xa9\xeb\xb3\x87\x59\x9e\xed\x74\x79\x3f\x9b\x4c\x2f\xce\x87\x1f\x18\xe1\x71\x56\xbc\x7f\xff\x69\xfc\xf6\xf4\xc7\x4f\x2a\x57\x77\x87\x57\x37\xf1\x6d\xff\xdd\xf8\xf3\xe7\xfe\xec\x70\x38\xba\x5b\x69\xdd\x5b\xdf\xdc\x5d\x19\x81\xb9\xf8\x70\x33\xfe\x89\x5c\xbc\x5b\x4d\x1e\x77\xf9\x5e\xad\xd7\x9e\x98\x75\x8e\x75\x1b\x6f\x9d\x75\x2a\x07\x67\xba\x56\xf8\xba\x53\x76\x97\x44\x0b\xac\xcc\x67\x55\x22\x36\xe5\xa5\x54\x99\xe4\xcd\xe9\x22\x48\x86\xa1\xb3\x60\xb8\xcc\xa5\x32\xad\x33\x65\xc9\x22\x93\x86\x11\x2e\x18\x45\xb7\x7c\xf9\x3b\x30\xc1\x0c\x23\xdc\xd5\x94\x70\x0c\x7b\x16\xe5\x1b\x2e\x0c\xba\x9d\xbf\xee\x41\x24\x69\x91\xa1\x30\xf0\xda\x53\x48\xa2\xf5\x5e\x5c\x08\x6a\x4b\x7c\xef\x35\xfc\xa7\xdb\xe9\x00\x2c\x88\x82\xa5\x1e\x2b\x69\x24\x95\x1c\x42\x58\x32\x11\xc9\xa5\xc7\x25\x25\x56\xd0\xcb\x37\x5b\x61\x08\xaf\xaa\xa4\xbf\x82\x7f\xc0\xab\xa5\xb6\xd9\x7f\x05\xc7\x76\x69\x57\x27\x2d\x40\x08\x41\xe0\x12\x6e\x71\x3a\x91\x74\x8e\x66\xaf\xc5\xf1\x06\x36\xe0\xa9\xd4\x06\xde\x80\xe3\x23\x4d\xa5\xf3\xba\x42\x58\x6a\x4f\x8a\x0c\xb5\x26\x09\x42\x08\x1b\x93\xb1\xb1\xb9\x66\xd9\x8a\x5c\x4c\xae\x3e\x7a\xb9\x3d\x7f\xf7\xd0\x8b\x88\x21\x35\x52\x07\x80\xcb\xe4\x33\xde\x15\xa8\xcd\x5e\x2d\xff\xfa\xc4\x6e\xd9\xbf\x52\xe6\xf7\x93\x6e\xb7\xd3\xe9\xfc\x31\xb3\xb9\x4c\x9e\x69\x75\x4d\xf1\x2c\x9b\x97\x8a\x19\x1c\xc9\xe4\x71\x8b\x3b\xbf\x97\xd2\xdb\x9a\x0c\xfc\xea\xea\xea\x76\x83\xa9\x8c\xd6\x83\xba\xbb\x27\x86\xd0\xb9\x3d\xcc\x80\x4a\x5e\x64\x42\x83\x14\x90\xc9\x29\xe3\x08\xd3\x35\x64\x64\xce\x44\x02\x52\x20\xc4\x05\xe7\x55\xb5\x95\x47\x80\x55\x91\x26\x45\x05\x29\xe1\x71\xbd\x51\x9d\x01\x11\x5b\x00\xe5\x44\xeb\xd0\xb1\x35\x4b\x98\x40\xe5\xc6\xbc\x60\x51\x53\xc3\x0e\x94\xf5\x1e\x3a\x39\x89\x22\x26\x92\x63\xe8\x1d\xe6\xab\x93\xaa\x6a\x5b\xea\x4a\x2e\xcb\x6f\x0f\x30\xb9\x9b\x45\x6e\xef\xc0\x9a\xec\xf2\xa4\x5a\x95\x77\x66\x25\x7c\x4f\x3a\x27\x02\x39\x94\xbf\x6e\xae\x58\x46\xd4\xda\x81\x4a\xec\x6b\x39\xd7\xc6\x88\x89\xa4\xc6\xe9\x74\x82\xb4\x7f\x5f\xa0\xbc\x93\x9d\xc7\x6e\xec\xb4\xdf\x20\xfb\x11\x5b\x3c\xca\x62\x13\xe0\x00\x8b\x42\x27\x62\x8b\x5f\x94\x2c\xf2\x1a\x61\x13\x17\xb9\x40\x15\x73\xb9\x3c\x26\x85\x91\x1b\x6b\xea\x47\x27\x28\x78\x03\xc8\x99\x36\x6e\x62\x21\x2a\xc0\xa4\x8d\xd6\xe8\xb5\x34\xfd\x82\xdf\x47\x7b\xda\xd2\x58\x4a\x83\x6a\x1b\x0e\x4e\xa6\xc8\x1f\x24\xcf\x35\x32\x3f\x86\xde\xdf\x4e\xb6\x7c\x01\x13\x79\xd1\x1c\x3c\x34\x45\x3a\x9f\xca\x55\x65\x20\x4d\xe7\xa7\x85\x91\x13\xaa\x24\xe7\x0e\x94\x9b\x18\x85\x8e\x51\x05\x3a\x30\x00\xbb\x09\xba\xdc\x6d\x48\xfd\x92\x75\x63\xc3\xb4\x30\x46\x8a\x1a\xbc\x7a\x71\x1a\xab\xa7\x46\xc0\xd4\x88\x6d\xa6\x0d\x99\x32\x11\xe1\x2a\x74\xf6\x2b\xfe\xa9\x11\x67\x1c\x89\x7a\x18\xf1\x98\x4b\x62\x8e\x15\x4b\x52\xb3\x75\x24\xd0\x39\x11\x0d\x76\xc2\xd7\x79\xca\xa8\x14\xb0\x59\xb9\x0a\x33\xb9\x40\x57\xb3\x44\x94\x17\x40\x4e\xc4\x00\x4a\xfc\x6d\x51\x54\x26\x7e\x5d\x18\xdb\x65\xb5\xea\x74\x5b\xdf\xbe\xd9\x05\x84\xa3\x32\x50\xfe\xba\x4c\xc4\x72\xe3\x48\xc4\x74\xce\xc9\xfa\x58\x48\x81\x95\xcb\xa5\xd0\x25\x6a\x8d\x22\x41\x67\x70\x8b\x9c\xca\x0c\xbd\x2d\xd7\x63\xa4\xf0\xac\xde\xd3\x86\x98\x72\x60\x78\x4e\xeb\x7d\x9f\xce\x3b\x47\x43\x18\xd7\x2f\x6b\xb8\x41\xb7\x81\xb6\xfb\x36\x30\x86\x29\xa4\x24\x7f\x24\x74\x3b\x02\xad\x0b\x4a\xd1\x5e\xdc\x8d\x95\x00\x81\x36\x4a\x8a\x64\x50\x95\x4a\x85\xda\x44\x04\xea\x8a\x08\xfc\x5a\x08\xda\x52\xaa\xba\x75\xb6\x62\x9b\x7a\xdf\xba\xd2\x34\x6e\xab\xe3\x05\x59\x80\x20\x0b\xd7\x90\xa9\x76\x5a\x76\x70\xb6\xb1\x98\x1a\xb6\xb0\xcd\x14\x90\x7a\xc2\xf8\x8b\x21\xd3\x86\x0e\xec\x55\xe2\x1a\x99\x24\xd6\x65\x43\xa6\xce\xa0\xbe\xff\x02\x9f\x0c\x02\x9f\xb3\x7b\xa0\x0f\x41\x74\x2e\x85\xc6\xdd\x28\xd5\xde\x43\x98\xce\x57\x28\x39\x2a\xcd\x76\x9b\x32\xae\xb6\x9e\x61\x8a\xbd\x59\x77\x00\x8c\x64\xf2\x50\xb9\x3a\xf4\xee\x65\xbf\x8e\x94\x21\x53\xb7\xb9\x92\x5a\x54\x9b\xfa\x68\x45\xad\xa5\x61\x6b\x0a\x62\x12\x21\x30\x01\x75\xb0\xb7\xda\x00\x41\xae\xb0\xd4\x4f\xa3\x4d\x8e\x03\x3f\x57\xd8\xa2\x68\xe7\xf8\x21\x63\x13\xe2\x5d\x94\x8f\x13\xd5\x5a\x4f\x32\x75\xda\x44\x9b\x2c\xbc\x84\xa7\x51\xda\x49\x03\xbb\x3d\x2a\x33\xf5\x12\x12\xab\xf0\x34\xc1\x8e\x1e\xa9\x3f\xed\x3c\x5a\xbb\xdd\x7b\xab\xff\x87\x09\x63\xb8\x42\x5a\xd8\xf9\x10\x46\x32\x79\xe1\x49\x77\x6f\xb4\x18\xd9\xe8\x7f\x97\xb1\xc2\x22\xfd\x49\x47\x8a\x91\x4c\xfe\x14\x53\x45\x3b\xd8\xdf\x7d\xa2\x28\x8f\xb6\x3f\x32\x4d\x34\xa5\xdf\xed\x06\x7e\x35\xfc\x07\x7e\xf5\xff\xac\xff\x06\x00\x00\xff\xff\xed\x59\xcb\xbf\xe7\x12\x00\x00")

func tmplIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplIndexHtml,
		"tmpl/index.html",
	)
}

func tmplIndexHtml() (*asset, error) {
	bytes, err := tmplIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/index.html", size: 4839, mode: os.FileMode(420), modTime: time.Unix(1583813850, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplJsScriptJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x5f\x73\xdb\x36\x12\x7f\xd7\xa7\xc0\xe0\x3c\x26\x19\x59\xb4\x72\xe3\x7b\x38\xc9\xb2\x2f\xe7\xb4\x4d\x3a\x4e\x33\x13\xe7\xa5\x95\x94\x0e\x4c\xac\x28\xd4\x10\xa0\x00\x60\x14\x27\xca\x77\xef\x80\x20\x45\x10\x94\x14\xb7\xd3\x97\xc4\xc2\xfe\x7e\xfb\x1f\xbb\xe0\x27\xa2\x50\x26\x0b\x61\xd0\x04\x0d\xc7\x3d\xfb\x53\xc1\xc7\x02\xb4\xd1\x68\x82\xa6\xf3\x71\xaf\x77\x12\x53\x99\x15\x2b\x10\x26\x49\x15\x10\xfa\x18\x2f\x0a\x91\x19\x26\x45\x9c\xa0\xaf\x3d\x84\x10\x3a\x89\xf1\xbf\xee\x8d\xb8\xe1\x40\xd4\x8d\x14\x5a\x72\xc0\x49\x9a\x71\x96\x3d\x74\xc1\x35\x21\x57\xb2\x58\x37\x68\x58\xad\xcd\x63\x9c\x8c\x5b\x18\xc3\x14\x64\x64\x8d\x93\x74\xc9\x28\x84\xd2\x25\xad\x7c\xb5\x72\xb3\xe2\x31\xc6\x7b\x10\x7a\x2d\x85\x86\x23\x90\x35\x28\xcd\x8e\x2a\xe1\x32\xef\x48\xbf\x25\xe3\x5e\x27\xf8\xdb\x12\xf8\x94\xc0\x1d\xb2\x15\xb4\xd5\x58\x6a\xad\x99\x88\x89\x4c\x81\xcd\xfc\x8d\x2d\xd1\x4e\x91\x02\x53\x28\xe1\xea\xd6\xef\x8f\x7b\xdf\x3c\x8a\x5e\xca\xcd\x4b\x30\x84\x71\x1d\x33\x5a\x33\x34\x98\x77\x72\x73\x07\x1c\x32\x03\xd4\x0a\x9c\x49\x2e\xf3\x1a\x5c\x97\x7d\xca\xe8\x3c\x09\x74\x76\xd8\x4e\xed\x49\x8c\x53\xce\xb4\x19\x94\x11\x0d\x98\x81\x15\xb6\x3d\xb2\x92\x9f\xe0\x86\x13\xad\xe3\x48\x57\xa4\xdf\x95\xdc\x44\xce\xa8\x4d\x81\x92\x9b\x41\x65\x70\x80\xfb\x8c\x26\x29\xa1\xf4\x00\xc5\xf7\x24\x07\x73\x23\xb9\x54\xff\x7f\xbc\x33\xc4\x14\x3a\xd6\xe5\x7f\x37\x92\x82\xf5\xa9\x8c\x89\x2d\x90\x77\x8c\x26\x13\xf4\xef\xe1\x10\x6d\xb7\x28\x3c\x7c\xee\x17\xa6\xca\x29\xd6\x45\x96\x81\xd6\xb8\x2a\x09\x02\xae\x61\x8f\xca\x8b\xe1\xc5\x3e\x36\x25\x22\x07\xd5\x26\x77\x51\x1b\xa2\x04\x13\x79\x0d\x6b\x45\xe8\x55\xe4\x0f\x2d\x85\x7f\xc3\x9a\xcb\xb0\x20\x14\xde\x16\x26\x7e\x3e\x1c\xd6\x5d\xc8\x16\x25\x3e\xad\xfb\x3d\xad\xba\x1a\x28\x3a\x3d\x45\x07\x44\xa9\x20\xab\x32\x1c\x8c\x93\xc6\x4d\x0a\x1c\x0c\xb4\x39\x53\xbc\x23\xe1\x79\xed\x77\xcb\x70\x25\xdf\x59\xab\x7e\x7f\xdf\x44\x05\x9c\x62\x8b\x6c\x94\xef\xd1\x9d\x56\xb4\xc9\x04\x2d\x08\xd7\xf0\x3d\x85\xee\xf0\xb8\x4a\xb2\xfa\xb8\xee\xf8\x6c\x0f\xd3\x42\xf1\xa7\xf9\x6d\xd1\x41\x52\xbc\x39\x8a\x26\xe8\xe7\xbb\xb7\xbf\xa4\xda\x28\x26\x72\xb6\x78\xac\xeb\x54\x4a\xcf\x50\x21\x28\x2c\x98\x00\x7a\x86\x2e\xaa\x5b\xe9\xd8\x2e\xf1\x07\xe9\x4e\x7c\x90\x5f\x97\x63\x3f\xbd\x92\x76\xd8\x3b\x3a\x97\xf9\x61\xcb\x05\x3f\xec\xb7\xbb\x26\x68\x12\xb4\x5c\x73\x7b\xc6\x7b\xfa\x99\x18\xa3\xe2\x28\xb3\xf7\x3f\x3a\x43\x11\xe1\xa0\x0c\x2a\xff\x1d\x44\xa8\x7f\xe8\xd6\x27\xc9\x3e\x5d\xf6\x6e\xbc\x16\xd5\xd5\x68\xc4\x8e\x52\x4f\xf1\x4a\x41\x9b\xdf\x5a\x25\x7e\x91\xd2\x15\x98\xa5\xa4\xa8\x8f\x30\xc2\xa8\x8f\x5a\xb2\x35\x31\x4b\x4f\x51\x67\x27\xe9\x47\x61\xc8\xe7\x57\x2c\x5f\x72\x96\x2f\x4d\x3d\x67\x93\x80\xd3\xde\x52\x5d\x92\x93\xb7\x59\xc1\xe2\x0a\x49\x95\xb8\xcd\xf1\x56\x59\x88\xe7\x32\x4f\xdc\xbc\x6d\x8d\xa3\x77\xce\xe1\xd6\x38\xfa\x0b\x95\xb6\x50\x46\xd1\xa4\xb3\xcc\x1a\x31\x25\x06\x0c\xb3\x63\xa2\x2c\x75\xa1\x14\x08\xf3\x9e\xad\xc0\x07\x2d\x0a\xce\x6f\xcb\xae\xdc\xc1\x6d\x3d\x2e\x07\xdd\x92\x7c\xaf\x5c\xe3\x6a\x8b\x36\x0b\xaf\x8a\xa2\x49\x54\xf0\x38\x21\xeb\x35\x08\x1a\x47\x97\x9c\x21\x46\x27\xd8\xdf\x5f\xb6\x43\x99\xb5\x16\x61\x54\xb6\xf0\x04\x07\x4b\x11\x05\xbf\x8f\x36\xb5\x53\x24\x45\xf9\x88\x98\x60\x7f\x9f\x37\x96\x92\x71\xb5\x4b\xca\x39\x88\xaf\xac\xa4\x4e\x50\x1f\x45\x97\xe7\x9c\x5d\x55\xeb\x36\x7c\x11\x94\x67\x99\x7d\xac\xbc\xe5\xf4\x56\xe6\xba\x4e\xb2\xce\x94\xe4\xbc\x8a\xf9\xa5\xdc\x88\x38\x58\xbe\x1b\xc5\x0c\xdc\xca\x3c\x36\xf0\xd9\xf8\x9d\xf0\x0f\xd4\xcf\xaa\x0c\xb2\xef\x5e\x48\x7e\xe6\xf7\x67\xf7\x78\xf4\x87\x23\xb5\x27\x5e\x98\x4d\x9c\x6d\x8a\x17\x27\x97\xf9\x6b\x03\xab\x3b\xf6\xc5\x86\x1a\xb6\x09\xe2\x0c\x27\xa9\x66\x5f\x76\x61\xdb\x67\x83\xcf\xb9\x42\xff\x19\xb6\x1f\x83\x51\xa8\x61\xb4\x60\x4a\x9b\xa8\x7e\x45\xed\x9e\x86\xed\xf7\x58\xb7\x52\x95\x56\x6b\xd1\xfa\x95\x2d\x1f\x5e\x14\x46\xde\x95\x40\x9c\xa4\x4c\xc7\xd1\x28\x5b\x42\xf6\x00\x34\x4a\xc2\x07\x29\x65\x9f\x7e\x6a\xf7\xbb\xb3\xf0\x5e\xae\xe3\xfd\xf2\x1c\x4c\x3c\xac\x61\xaf\xc0\x8e\x8f\x23\x9e\x36\x99\xee\xba\x79\x2b\xf3\xbf\xe1\xa9\xeb\x8d\xfd\x5e\x3a\xd9\x53\x3d\x0c\x1b\xd6\x2b\x77\xe6\xce\x6d\xbb\xa2\x09\x12\xb0\x41\x2f\x89\x81\x03\x83\xcb\x03\x5b\xdb\x0e\x69\x3b\xfc\x1c\xa3\xfe\x2e\x86\x38\x80\xbd\x91\xc2\x2c\x4b\xdc\xf3\x2e\x38\xc0\xfe\x58\x70\xfe\x2b\x10\xe5\xd4\xa2\xff\xa1\x23\xd8\x57\xb2\x50\xda\x01\x47\x47\x60\x6f\x98\x28\x0c\x3c\x01\x78\x07\x99\x14\x74\x77\x81\xaa\xe1\x53\x87\x1f\x7c\x2d\x04\x6b\xc5\xdf\x1b\xf6\xef\x66\x63\xac\x39\xc9\x20\x3e\x3f\x3d\xcf\xcf\x50\x74\x4a\x56\xeb\x71\xd9\xf8\xd5\xf1\xa5\x3b\xe6\xa6\x75\x7a\xe5\x4e\x73\x7b\xda\x72\xa6\xad\x33\xc6\xf1\x6c\x56\x4c\xc9\xe0\xcb\x8b\xc1\x6f\xc3\xc1\x7f\xe7\x5f\x2f\xbe\x6d\x67\xb3\xe9\x87\x62\xbe\x9d\x7e\x98\xcd\xf0\x3c\x79\x86\xe3\x99\x7e\x36\x4a\xae\xb7\xb3\xfb\xd8\xa8\x02\xb6\xe5\x30\xdd\x8a\x82\xf3\x64\x76\xbf\x1d\x5c\xcf\x68\x3f\xbe\x1e\xcd\xd2\x19\x7d\x96\x5c\xc7\xd7\xa3\x29\xfc\x30\x9f\xf6\x67\x83\xb9\x95\x24\xd7\x89\x75\x65\xf7\x95\xb7\x22\x26\x5b\xfa\xfd\x5a\xb6\x10\xb7\x0b\x32\x12\xc5\xea\x1e\x54\xd4\x7c\x56\xda\x0b\x70\xfe\x01\x9f\xa7\xc6\x6e\x56\x47\xf5\xb9\x3b\xcc\xe8\xe4\x28\xc6\x4d\xb8\xd2\xc6\x03\x3c\x7a\x06\xd0\xbe\xef\x8f\x80\xe1\x1e\x76\x21\xa9\x17\xd0\x4b\x37\x9a\xf4\x1c\x75\xa7\x52\x7c\x2f\x25\x07\x22\x3c\xcd\xbe\x2e\x9b\xdf\xa7\x68\xb1\x38\x5f\x45\xf8\x19\x15\x5d\xea\x35\x11\xf5\x52\xb0\x3b\xc0\x12\xed\xf6\x2c\x17\x42\xa9\xdb\xad\x03\x8b\xbb\x8a\xbc\x8f\xec\x3f\x03\x00\x00\xff\xff\x1b\x17\xc5\x73\xf6\x10\x00\x00")

func tmplJsScriptJsBytes() ([]byte, error) {
	return bindataRead(
		_tmplJsScriptJs,
		"tmpl/js/script.js",
	)
}

func tmplJsScriptJs() (*asset, error) {
	bytes, err := tmplJsScriptJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/js/script.js", size: 4342, mode: os.FileMode(420), modTime: time.Unix(1583810807, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/css/style.css": tmplCssStyleCss,
	"tmpl/index.html":    tmplIndexHtml,
	"tmpl/js/script.js":  tmplJsScriptJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"style.css": &bintree{tmplCssStyleCss, map[string]*bintree{}},
		}},
		"index.html": &bintree{tmplIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"script.js": &bintree{tmplJsScriptJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
